/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Cafe_Sales_Managment;

import com.microsoft.sqlserver.jdbc.SQLServerException;
import com.mysql.cj.jdbc.PreparedStatementWrapper;
import com.mysql.cj.xdevapi.Result;
import com.sun.jdi.connect.spi.Connection;
import java.beans.Statement;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author ucwaz
 */
public class MenuUI extends javax.swing.JFrame {

    /**
     * Creates new form MenuUI
     */
    public MenuUI() {
        initComponents();
        
        for (int i = 0; i < Menutable.getRowCount(); i++) {
            Menutable.setValueAt("Add", i, 3);
        }

        // Set renderer and editor
        Menutable.getColumnModel().getColumn(3).setCellRenderer(new ButtonRenderer());
        Menutable.getColumnModel().getColumn(3).setCellEditor(new ButtonEditor(new JTextField(), this));

        Menutable.setRowHeight(30);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        btnAdd1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        btnLogout = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Menutable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        cartTable = new javax.swing.JTable();
        btnPlacceorder = new javax.swing.JButton();
        AddtoCart = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();

        jMenuItem1.setText("jMenuItem1");

        btnAdd1.setText("Add");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Menu");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setMinimumSize(new java.awt.Dimension(400, 400));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnLogout.setText("Logout");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });
        jPanel1.add(btnLogout, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 270, 100, 30));

        Menutable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Cappuccino", "Coffee",  new Float(550.0), null},
                {"Green Tea", "Tea",  new Float(400.0), null},
                {"Croissant", "Pastry",  new Float(500.0), null},
                {"Burger", "Food",  new Float(950.0), null},
                {"Cheesecake", "Dessert",  new Float(800.0), null}
            },
            new String [] {
                "Item", "Category", "Price", "Add"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(Menutable);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 370, 230));

        cartTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cart", "Price"
            }
        ));
        jScrollPane2.setViewportView(cartTable);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 10, 230, 220));

        btnPlacceorder.setText("Place Order");
        btnPlacceorder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlacceorderActionPerformed(evt);
            }
        });
        jPanel1.add(btnPlacceorder, new org.netbeans.lib.awtextra.AbsoluteConstraints(629, 270, 110, 30));

        AddtoCart.setText("Add to cart");
        AddtoCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddtoCartActionPerformed(evt);
            }
        });
        jPanel1.add(AddtoCart, new org.netbeans.lib.awtextra.AbsoluteConstraints(525, 270, 90, 30));

        jSeparator1.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator1.setForeground(new java.awt.Color(0, 0, 0));
        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jPanel1.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 0, 20, 250));

        jSeparator2.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator2.setForeground(new java.awt.Color(0, 0, 0));
        jPanel1.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 250, 770, 10));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 770, 320));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        // TODO add your handling code here:
         int confirm = JOptionPane.showConfirmDialog(
                this,
                "Are you sure you want to log out?",
                "Logout Confirmation",
                JOptionPane.YES_NO_OPTION
        );

        if (confirm == JOptionPane.YES_OPTION) {
            // Close current MenuUI window
            this.dispose();

            // Open the Login page again
            Login_UI loginPage = new Login_UI();
            loginPage.setVisible(true);
        }
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void AddtoCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddtoCartActionPerformed
        // TODO add your handling code here:
        if (Menutable.getSelectedRow() != -1) {
            Object Cartitem = Menutable.getModel().getValueAt(Menutable.getSelectedRow(), 0);
            Object Cartcategory = Menutable.getModel().getValueAt(Menutable.getSelectedRow(), 1);
            Object Cartprice = Menutable.getModel().getValueAt(Menutable.getSelectedRow(), 2);
            DefaultTableModel model = (DefaultTableModel) cartTable.getModel();
            Object[] rowData1 = {Cartitem, Cartprice};
            model.addRow(rowData1);
            JOptionPane.showMessageDialog(this, "Item added to cart!");
        } else {
            JOptionPane.showMessageDialog(this, "Please select an item first!");
        }
    }//GEN-LAST:event_AddtoCartActionPerformed

    private void btnPlacceorderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlacceorderActionPerformed
         Object orderItems;
        
        final String CUSTOMER_NAME = "Sarah";

        if (orderItems == null) {
            orderItems = new ArrayList<>();
            orderItems.add(new OrderItems("Cappuccino", 1, 550.00));
            orderItems.add(new OrderItems("Croissant", 2, 350.00));
        }
        // -------------------------------------------------------------

        Connection con = null;
        PreparedStatementWrapper pstmtOrder = null;
        PreparedStatementWrapper pstmtDetails = null;

        if (orderItems.) { 
        JOptionPane.showMessageDialog(this, "The order list is empty.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
        // Calculate the grand total from the OrderItem list
        double totalAmount = orderItems.stream().mapToDouble(OrderItem::getSubtotal).sum();

        try {
            con = ConnectionClass.createConnection();
            

            // 1. Insert into Orders table (Header)
            String sqlOrder = "INSERT INTO Orders (Customer_Name, Order_Date, Total_Amount) VALUES (?, NOW(), ?)";
            pstmtOrder = con.prepareStatement(sqlOrder, Statement.RETURN_GENERATED_KEYS);

            pstmtOrder.setString(1, CUSTOMER_NAME);
            pstmtOrder.setDouble(2, totalAmount);
            pstmtOrder.executeUpdate();

            // Get the Order_ID
            int orderId = -1;
            ResultSet rs = pstmtOrder.getGeneratedKeys();
            if (rs.next()) {
                orderId = rs.getInt(1);
            } else {
                throw new SQLServerException("Failed to retrieve generated Order ID.");
            }

            // 2. Insert into Order_Details table (Line Items) - NOW REQUIRES 5 VALUES
            String sqlDetails = "INSERT INTO Order_Details (Order_ID, Item_Name, Quantity, Unit_Price, Subtotal) VALUES (?, ?, ?, ?, ?)";
            pstmtDetails = con.prepareStatement(sqlDetails);

            for (OrderItem item : orderItems) {
                pstmtDetails.setInt(1, orderId);                       // 1: Order_ID
                pstmtDetails.setString(2, item.getItemName());         // 2: Item_Name
                pstmtDetails.setInt(3, item.getQuantity());            // 3: Quantity
                pstmtDetails.setDouble(4, item.getUnitPrice());        // 4: Unit_Price (NEWLY ADDED)
                pstmtDetails.setDouble(5, item.getSubtotal());         // 5: Subtotal
                pstmtDetails.addBatch();
            }

            pstmtDetails.executeBatch(); // Execute all line item inserts

            JOptionPane.showMessageDialog(this,
                    "Order Placed Successfully for " + CUSTOMER_NAME + "! Order ID: " + orderId,
                    "Success",
                    JOptionPane.INFORMATION_MESSAGE);

            this.dispose();

        } catch (Exception e) {
            try {
                if (con != null) {
                    con.rollback(); // 4. ROLLBACK TRANSACTION ❌
                }
            } catch (SQLServerException ex) {
                ex.printStackTrace();
            }
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();

        } finally {
            // Close resources
            try {
                if (pstmtDetails != null) {
                    pstmtDetails.close();
                }
                if (pstmtOrder != null) {
                    pstmtOrder.close();
                }
                if (con != null) {
                    con.close();
                }
            } catch (SQLServerException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnPlacceorderActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* CreatMenuisplay the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MenuUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddtoCart;
    private javax.swing.JTable Menutable;
    private javax.swing.JButton btnAdd1;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnPlacceorder;
    private javax.swing.JTable cartTable;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    // End of variables declaration//GEN-END:variables

    private void setupTable() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    public void addToCart(String item, String category, int price) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
